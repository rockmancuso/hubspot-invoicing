// HubSpot Invoice Generation
const config = require('../config');
const logger = require('../utils/logger');

/**
 * Calculates the due date for an invoice.
 * @returns {string} ISO formatted date string (YYYY-MM-DD).
 */
function calculateDueDate() {
  const dueDays = parseInt(config.INVOICE_DUE_DAYS, 10) || 30;
  const dueDate = new Date();
  dueDate.setDate(dueDate.getDate() + dueDays);
  return dueDate.toISOString().split('T')[0];
}

/**
 * Creates an invoice in HubSpot.
 * Assumes line items are passed as a property of the invoice object.
 *
 * @async
 * @param {hubspot.Client} hubspotClient The initialized HubSpot client.
 * @param {object} invoiceData - Data for creating the invoice.
 * @param {string} invoiceData.companyId - ID of the company to associate.
 * @param {string} invoiceData.contactId - ID of the billing contact to associate.
 * @param {number} invoiceData.invoiceAmount - The total amount for the invoice.
 * @param {Array<object>} invoiceData.lineItems - Formatted line items for the invoice.
 * @param {string} invoiceData.currency - Currency code (e.g., 'USD').
 * @returns {Promise<object>} A promise that resolves to the created HubSpot invoice object.
 * @throws {Error} If there's an issue creating the invoice in HubSpot.
 */
const createInvoice = async (hubspotClient, invoiceData) => {
  const { companyId, contactId, invoiceAmount, lineItems, currency } = invoiceData;
  logger.info(`Creating invoice for company ID: ${companyId}, Contact ID: ${contactId}, Amount: ${invoiceAmount}`);

  if (!config.HUBSPOT_INVOICE_OBJECT_TYPE_ID) {
    logger.error('HUBSPOT_INVOICE_OBJECT_TYPE_ID is not configured.');
    throw new Error('Configuration for Invoice Object Type ID is missing.');
  }

  try {
    const invoiceProperties = {
      [config.HUBSPOT_INVOICE_AMOUNT_PROPERTY || 'hs_invoice_amount']: invoiceAmount.toString(),
      [config.HUBSPOT_INVOICE_DUE_DATE_PROPERTY || 'hs_due_date']: calculateDueDate(),
      [config.HUBSPOT_INVOICE_BILLING_CONTACT_ID_PROPERTY || 'hs_billing_contact_id']: contactId,
      [config.HUBSPOT_INVOICE_CURRENCY_PROPERTY || 'hs_currency_code']: currency || 'USD',
      [config.HUBSPOT_INVOICE_STATUS_PROPERTY || 'hs_status']: config.HUBSPOT_INVOICE_DEFAULT_STATUS || 'DRAFT',
      // Assuming line items are stored in a property like 'hs_line_items'
      // The structure of lineItems should match what HubSpot expects for this property.
      // This might be an array of objects, each representing a line item.
      // Example: { name, quantity, price, hs_product_id (optional), description }
      // The `index.js` already prepares `formattedLineItems` in this structure.
      [config.HUBSPOT_INVOICE_LINE_ITEMS_PROPERTY || 'hs_line_items']: JSON.stringify(lineItems), // HubSpot might expect JSON string or direct object
      // Add other properties as needed from config
      // e.g., hs_invoice_number if not auto-generated by HubSpot
    };

    // Clean up any undefined properties that might result from missing configs
    Object.keys(invoiceProperties).forEach(key => {
        if (invoiceProperties[key] === undefined) {
            delete invoiceProperties[key];
        }
    });


    const associations = [];
    if (companyId && config.HUBSPOT_ASSOCIATION_TYPE_ID_INVOICE_TO_COMPANY) {
      associations.push({
        to: { id: companyId },
        types: [{
          associationCategory: 'HUBSPOT_DEFINED', // Or 'USER_DEFINED' if custom
          associationTypeId: parseInt(config.HUBSPOT_ASSOCIATION_TYPE_ID_INVOICE_TO_COMPANY, 10)
        }]
      });
    }
    if (contactId && config.HUBSPOT_ASSOCIATION_TYPE_ID_INVOICE_TO_CONTACT) {
      associations.push({
        to: { id: contactId },
        types: [{
          associationCategory: 'HUBSPOT_DEFINED', // Or 'USER_DEFINED' if custom
          associationTypeId: parseInt(config.HUBSPOT_ASSOCIATION_TYPE_ID_INVOICE_TO_CONTACT, 10)
        }]
      });
    }

    const createInvoiceRequest = {
      properties: invoiceProperties,
      associations: associations,
    };

    logger.info('Sending create invoice request to HubSpot:', { request: createInvoiceRequest });
    const createdInvoiceResponse = await hubspotClient.crm.objects.basicApi.create(
      config.HUBSPOT_INVOICE_OBJECT_TYPE_ID,
      createInvoiceRequest
    );
    logger.info(`Invoice created successfully. Invoice ID: ${createdInvoiceResponse.id}`);
    return createdInvoiceResponse;

  } catch (error) {
    logger.error('Error creating HubSpot invoice:', error.body || error.message || error);
    if (error.body && error.body.message) {
      throw new Error(`HubSpot API Error (createInvoice): ${error.body.message}`);
    }
    throw error;
  }
};

/**
 * Updates the company's membership dues property in HubSpot.
 *
 * @async
 * @param {hubspot.Client} hubspotClient The initialized HubSpot client.
 * @param {string} companyId The ID of the company to update.
 * @param {number} amount The invoice amount to set.
 * @returns {Promise<object>} A promise that resolves to the updated company object.
 * @throws {Error} If there's an issue updating the company in HubSpot.
 */
const updateCompanyMembershipDues = async (hubspotClient, companyId, amount) => {
  const duesProperty = config.HUBSPOT_COMPANY_MEMBERSHIP_DUES_PROPERTY;
  if (!duesProperty) {
    logger.error('HUBSPOT_COMPANY_MEMBERSHIP_DUES_PROPERTY is not configured. Cannot update company.');
    throw new Error('Configuration for Company Membership Dues Property is missing.');
  }

  logger.info(`Updating company ID: ${companyId} with membership dues: ${amount} to property: ${duesProperty}`);

  try {
    const companyUpdatePayload = {
      properties: {
        [duesProperty]: amount.toString(), // Ensure it's a string if HubSpot expects that
      },
    };

    const updatedCompanyResponse = await hubspotClient.crm.companies.basicApi.update(companyId, companyUpdatePayload);
    logger.info(`Company ${companyId} updated successfully with new membership dues.`);
    return updatedCompanyResponse;

  } catch (error) {
    logger.error(`Error updating membership dues for company ${companyId}:`, error.body || error.message || error);
    if (error.body && error.body.message) {
      throw new Error(`HubSpot API Error (updateCompanyMembershipDues): ${error.body.message}`);
    }
    throw error;
  }
};

module.exports = { createInvoice, updateCompanyMembershipDues };